#!/usr/bin/env bash

set -e # Fail the script if any installs fail
source helpers.sh

brew_prefix=$(brew --prefix)

# Essentials
os_install wget
os_install cmake
if os_is ubuntu; then
	os_install build-essential # make and more
	os_install lsb-release
	os_install gpg
	os_install unzip
	os_install software-properties-common
fi
if os_is mac; then
	xcode-select --install || true
	os_install make
	os_install mono
fi

# Python package managers
pip3 install pipx   # https://pypa.github.io/pipx
pipx_install poetry # https://python-poetry.org

# Get the latest zsh and bash from homebrew (don't want to check for existing)
brew install zsh
brew install bash
# Add to the allowed shells so we can use them in chsh
# Grep for the lines we're adding to make sure they're not already there
grep -qxF '# Next lines generated by dotfiles/post_install.sh' /etc/shells || cat <<EOT | sudo tee -a /etc/shells
# Next lines generated by dotfiles/post_install.sh
$brew_prefix/bin/zsh
$brew_prefix/bin/bash
EOT

# GNU versions of important programs
if os_is mac; then
	# Don't want to check if they're already installed
	brew install gnu-sed
	brew install make
fi

# Make sure we have tmux-256color support on mac
# https://gist.github.com/bbqtd/a4ac060d6f6b9ea6fe3aabe735aa9d95
# https://gpanders.com/blog/the-definitive-guide-to-using-tmux-256color-on-macos/
if os_is mac; then
	curl -LO https://invisible-island.net/datafiles/current/terminfo.src.gz && gunzip terminfo.src.gz
	# Fix colors for htop, tig, ...
	gsed -i 's|pairs#0x10000|pairs#32767|' terminfo.src
	gsed -i 's|pairs#65536|pairs#32767|' terminfo.src
	/usr/bin/tic -xe alacritty-direct,tmux-256color terminfo.src # Result is put in ~/.terminfo
	rm terminfo.src
fi

# Git credential manager
# https://github.com/git-ecosystem/git-credential-manager/blob/release/docs/install.md
if have_not_installed git-credential-manager; then
	if os_is mac; then
		brew install --cask git-credential-manager
		# This install on mac annoyingly makes changes to ~/.gitconfig, so we have to undo them
		git checkout -- git/.gitconfig
	fi
	if os_is ubuntu; then
		wget "https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.3.2/gcm-linux_amd64.2.3.2.deb"
		sudo dpkg -i gcm-linux_amd64.2.3.2.deb
		rm gcm-linux_amd64.2.3.2.deb
	fi
fi

# zsh-abbr https://zsh-abbr.olets.dev/installation.html
if no_directory_exists_at "$HOME/opt/zsh-abbr"; then
	rm -rf "$HOME/opt/zsh-abbr"
	git clone https://github.com/olets/zsh-abbr --single-branch --branch main --depth 1 "$HOME/opt/zsh-abbr"
fi

# Powerlevel10k https://github.com/romkatv/powerlevel10k#installation
if no_directory_exists_at "$HOME/opt/powerlevel10k"; then
	rm -rf "$HOME/opt/powerlevel10k"
	git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$HOME/opt/powerlevel10k"
fi

# Fzf https://github.com/junegunn/fzf/
if no_directory_exists_at "$HOME/opt/fzf"; then
	rm -rf "$HOME/opt/fzf"
	git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/opt/fzf"
	"$HOME/opt/fzf/install" --bin --no-update-rc
fi

# ZSH extra completions https://github.com/zsh-users/zsh-completions
if no_directory_exists_at "$HOME/opt/zsh-completions"; then
	rm -rf "$HOME/opt/zsh-completions"
	git clone --depth 1 https://github.com/zsh-users/zsh-completions.git "$HOME/opt/zsh-completions"
fi

# Node https://nodejs.org/en/download/package-manager
brew_install node
npm install --global npm@latest

# Yarn https://yarnpkg.com/getting-started/install
brew_install corepack
corepack enable

# Rust and Cargo https://www.rust-lang.org/tools/install
if have_not_installed rustup; then
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
	# shellcheck source=/dev/null
	source "$HOME/.cargo/env"
fi

# NOTE: These take a long time
# Ruby and rbenv
# https://github.com/rbenv/rbenv
default_ruby_version=3.1.4
if have_not_installed rbenv; then
	brew_install rbenv
	brew_install ruby-build
	eval "$(rbenv init - bash)"
fi
rbenv install --skip-existing $default_ruby_version
rbenv global $default_ruby_version

# Terminal handy tools
os_install vim
os_install tmux   # https://github.com/tmux/tmux
os_install tig    # https://github.com/jonas/tig
cargo_install eza # https://github.com/eza-community/eza
brew_install bat  # https://github.com/sharkdp/bat
if have_not_installed rg; then
	cargo_install ripgrep # https://github.com/BurntSushi/ripgrep
fi
os_install neofetch    # https://github.com/dylanaraps/neofetch
gem_install tmuxinator # https://github.com/tmuxinator/tmuxinator
brew_install perl      # https://www.perl.org Needed for some vim plugins
if have_not_installed cpanm; then
	brew_install cpanminus # For cpanm perl modules
fi
if have_not_installed dua; then
	cargo_install dua-cli # https://github.com/Byron/dua-cli
fi

# Neovim https://github.com/neovim/neovim
os_install neovim
pip3 install virtualenvwrapper # Intentionally not a --user install
# shellcheck source=/dev/null
source virtualenvwrapper.sh
npm_global_install neovim
gem_install neovim
cpanm -n Neovim::Ext # https://neovim.io/doc/user/provider.html#provider-perl

# Language servers
brew_install lua-language-server                # https://github.com/LuaLS/lua-language-server
os_install shellcheck                           # https://github.com/koalaman/shellcheck
npm_global_install bash-language-server         # https://github.com/bash-lsp/bash-language-server
npm_global_install vim-language-server          # https://github.com/iamcco/vim-language-server
npm_global_install typescript-language-server   # https://github.com/typescript-language-server/typescript-language-server
npm_global_install typescript                   # https://github.com/microsoft/TypeScript
npm_global_install vscode-langservers-extracted # https://github.com/hrsh7th/vscode-langservers-extracted

## Pyython language server, currently doesn't work in CICD
# mkvirtualenv python-lsp-server
# workon python-lsp-server
# pip install "python-lsp-server[all]"
# pip install pylsp-mypy
# pip install pylsp-rope
# pip install python-lsp-ruff
# deactivate

gem_install solargraph                          # https://github.com/castwide/solargraph
gem_install yard                                # For solargraph docs https://github.com/lsegal/yard
npm_global_install vscode-langservers-extracted # https://github.com/hrsh7th/vscode-langservers-extracted

# Formatters and linters
os_install shfmt            # https://github.com/mvdan/sh
npm_global_install prettier # https://prettier.io
pipx_install ruff           #
pipx_install isort          #
gem_install rubocop         # https://github.com/rubocop/rubocop
gem_install htmlbeautifier  # https://github.com/threedaymonk/htmlbeautifier
npm_global_install eslint   # https://eslint.org
gem_install erb-formatter   # https://github.com/nebulab/erb-formatter
if have_not_installed sqlformat; then
	pipx_install sqlparse # for `sqlformat` https://github.com/andialbrecht/sqlparse/tree/master/sqlparse
fi

# Redis
# https://redis.io/docs/getting-started/installation/
if os_is mac; then
	os_install redis
	brew services start redis
fi
if os_is ubuntu; then
	curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg

	echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list

	sudo apt-get update
	sudo apt-get install --yes redis
	sudo systemctl enable redis-server
fi

# AWS
# <install the aws-cli>
npm_global_install aws-cdk # https://docs.aws.amazon.com/cdk/v2/guide/home.html

# Heroku
if os_is mac; then
	brew tap heroku/brew
	brew_install heroku
fi
if os_is ubuntu; then
	curl https://cli-assets.heroku.com/install.sh | sh
fi

# Github CLI
brew_install gh
gh extension install github/gh-copilot

# Android platform tools
# https://developer.android.com/studio/releases/platform-tools
android_sdk=""
if os_is mac; then
	android_sdk="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip"
fi
if os_is ubuntu; then
	android_sdk="https://dl.google.com/android/repository/platform-tools-latest-linux.zip"
fi
if have_not_installed adb; then
	wget $android_sdk -O android-sdk.zip
	unzip android-sdk.zip -d ~
	rm android-sdk.zip
fi

# Google Cloud SQL proxy
# https://cloud.google.com/sql/docs/mysql/connect-instance-auth-proxy
proxy_file_url=""
if os_is mac; then
	proxy_file_url="https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.7.2/cloud-sql-proxy.darwin.arm64"
fi
if os_is ubuntu; then
	proxy_file_url="https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.7.2/cloud-sql-proxy.linux.amd64"
fi
if have_not_installed cloud_sql_proxy; then
	sudo curl -o /usr/local/bin/cloud_sql_proxy $proxy_file_url
	sudo chmod +x /usr/local/bin/cloud_sql_proxy
fi

# Mysql
if os_is mac && chip_is apple_silicon; then
	brew_install mysql
	brew_install zstd
fi
if os_is ubuntu; then
	os_install mysql-server
	os_install libmysqld-dev
	os_install libmysqlclient-dev
fi

# Gcloud
gcloud_sdk_url=''
if os_is mac && chip_is apple-silicon; then
	# macOS 64-bit https://cloud.google.com/sdk/docs/install#mac
	gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-455.0.0-darwin-arm.tar.gz"
fi
if os_is mac && chip_is intel; then
	# macOS 64-bit https://cloud.google.com/sdk/docs/install#mac
	gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-455.0.0-darwin-x86_64.tar.gz"
fi
if os_is ubuntu; then
	# Linux 64-bit https://cloud.google.com/sdk/docs/quickstart#linux
	gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-455.0.0-linux-x86_64.tar.gz"
fi
if have_not_installed gcloud; then
	# Download the install tar.gz
	wget $gcloud_sdk_url -O cloud-sdk.tar.gz
	# Extract it to the home dir
tar -xvf cloud-sdk.tar.gz -C ~
	# Run the install script
	~/google-cloud-sdk/install.sh --usage-reporting=false --command-completion=false --path-update=false --quiet
	# Remove the install tar.gz
	rm cloud-sdk.tar.gz
fi

## Chromedriver
#if os_is mac; then
	#brew install --cask chromedriver
	#xattr -d com.apple.quarantine "$(which chromedriver)" # Let macOS run it
#fi

# Global Ruby gems
gem_install rails # https://github.com/rails/rails
yard gems || true # Generate documentation for all installed gems (for solargraph)
yard gems         # Need to run it twice because the first one fails (annoyingly)

## Gcloud
#gcloud_sdk_url=''
#if os_is mac; then
## macOS 64-bit https://cloud.google.com/sdk/docs/install#mac
#gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-319.0.0-linux-x86_64.tar.gz"
#fi
#if os_is ubuntu; then
## Linux 64-bit https://cloud.google.com/sdk/docs/quickstart#linux
#gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-319.0.0-darwin-x86_64.tar.gz"
#fi
#if have_not_installed gcloud; then
## Download the install tar.gz
#wget $gcloud_sdk_url -O cloud-sdk.tar.gz
## Extract it to the home dir
#tar -xvf cloud-sdk.tar.gz -C ~
## Run the install script
#~/google-cloud-sdk/install.sh --usage-reporting=false --command-completion=false --path-update=false
## Remove the install tar.gz
#rm cloud-sdk.tar.gz
#fi

## Java
#if os_is ubuntu; then
#if have_not_installed java; then
#os_install default-jre
#fi
#fi

## TODO see if we can remove duplicated code between here and bashrc
#export WORKON_HOME=~/.virtualenvs
#if os_is mac; then
#export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3.9
#source /usr/local/bin/virtualenvwrapper.sh
#fi
#if os_is ubuntu; then
#export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.9
#source ~/.local/bin/virtualenvwrapper.sh
#fi

# .NET SDK and runtime
# Ignore for now, there were some issues running it
# on the github action ubuntu:22.04 runner image
#if os_is mac; then
## Pre-requisite
## https://learn.microsoft.com/en-us/dotnet/core/install/macos#libgdiplus
#os_install mono-libgdiplus
#fi
## https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script
#if have_not_installed dotnet; then
#wget https://dot.net/v1/dotnet-install.sh
#chmod +x dotnet-install.sh
#./dotnet-install.sh --channel 7.0
#rm dotnet-install.sh
#fi
