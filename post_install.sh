#!/usr/bin/env bash

set -e # Fail the script if any installs fail
set -x # Print each command as it runs
source helpers.sh

brew_prefix=$(brew --prefix)

# Essentials
os_install wget
os_install cmake
if os_is ubuntu; then
	os_install build-essential # make and more
	os_install lsb-release
	os_install gpg
	os_install unzip
	os_install software-properties-common
	os_install libz-dev  # Needed for some rust cli tools
	os_install ntpdate   # To update the clock when it gets out of sync
	os_install libpq-dev # Needed for the pg gem and other postgres stuff
fi
if os_is mac; then
	xcode-select --install || true
	os_install make
fi
if os_is wsl-ubuntu; then
	# For utilities in WSL like `wslview` to open browser windows etc.
	sudo add-apt-repository ppa:wslutilities/wslu -y
	sudo apt update
	os_install wslu
fi

# Python package managers
if os_is ubuntu; then
	brew_install pipx # https://pypa.github.io/pipx
fi
if os_is mac; then
	os_install pipx # https://pypa.github.io/pipx
fi
pipx ensurepath
pipx_install poetry # https://python-poetry.org

# Python stuff
if not_ci; then
	# These are failing for some reason on the CI pipeline
	# TODO: At some point, delete the `not_ci` check and try again
	brew_install python-tk@3.11
	brew_install python-tk@3.12
fi
pipx_install pyflyby        # https://github.com/deshaw/pyflyby
pipx inject pyflyby ipython # Needs ipython to work

# Get the latest zsh and bash from homebrew (don't want to check for existing)
brew install zsh
brew install bash
# Add to the allowed shells so we can use them in chsh
# Grep for the lines we're adding to make sure they're not already there
grep -qxF '# Next lines generated by dotfiles/post_install.sh' /etc/shells || cat <<EOT | sudo tee -a /etc/shells
# Next lines generated by dotfiles/post_install.sh
$brew_prefix/bin/zsh
$brew_prefix/bin/bash
EOT

# GNU versions of important programs
if os_is mac; then
	# Don't want to check if they're already installed
	brew install gnu-sed
	brew install make
fi

# Make sure we have tmux-256color support on mac
# https://gist.github.com/bbqtd/a4ac060d6f6b9ea6fe3aabe735aa9d95
# https://gpanders.com/blog/the-definitive-guide-to-using-tmux-256color-on-macos/
if os_is mac; then
	curl -LO https://invisible-island.net/datafiles/current/terminfo.src.gz && gunzip terminfo.src.gz
	# Fix colors for htop, tig, ...
	gsed -i 's|pairs#0x10000|pairs#32767|' terminfo.src
	gsed -i 's|pairs#65536|pairs#32767|' terminfo.src
	/usr/bin/tic -xe alacritty-direct,tmux-256color terminfo.src # Result is put in ~/.terminfo
	rm terminfo.src
fi

# Git credential manager
# https://github.com/git-ecosystem/git-credential-manager/blob/release/docs/install.md
if have_not_installed git-credential-manager; then
	if os_is mac; then
		brew install --cask git-credential-manager
	fi
	if os_is ubuntu; then
		wget "https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.3.2/gcm-linux_amd64.2.3.2.deb"
		sudo dpkg -i gcm-linux_amd64.2.3.2.deb
		rm gcm-linux_amd64.2.3.2.deb
	fi
fi

# Git Large File Storage (LFS)
# https://git-lfs.com/
brew_install git-lfs

# zsh-abbr https://zsh-abbr.olets.dev/installation.html
if no_directory_exists_at "$HOME/opt/zsh-abbr"; then
	git clone https://github.com/olets/zsh-abbr --single-branch --branch main --depth 1 "$HOME/opt/zsh-abbr"
fi

# Powerlevel10k https://github.com/romkatv/powerlevel10k#installation
if no_directory_exists_at "$HOME/opt/powerlevel10k"; then
	git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$HOME/opt/powerlevel10k"
fi

# Fzf https://github.com/junegunn/fzf/
if no_directory_exists_at "$HOME/opt/fzf"; then
	git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/opt/fzf"
	"$HOME/opt/fzf/install" --bin --no-update-rc
fi

# ZSH extra completions https://github.com/zsh-users/zsh-completions
if no_directory_exists_at "$HOME/opt/zsh-completions"; then
	git clone --depth 1 https://github.com/zsh-users/zsh-completions.git "$HOME/opt/zsh-completions"
fi

# golang
if have_not_installed go; then
	go_version="1.22.1"
	if os_is ubuntu && chip_is x86; then
		wget "https://go.dev/dl/go${go_version}.linux-amd64.tar.gz" -O "go.tar.gz"
	fi
	if os_is mac && chip_is apple_silicon; then
		wget "https://go.dev/dl/go${go_version}.darwin-arm64.tar.gz" -O "go.tar.gz"
	fi
	if os_is mac && chip_is intel; then
		wget "https://go.dev/dl/go${go_version}.darwin-amd64.tar.gz" -O "go.tar.gz"
	fi
	tar -C "$HOME/opt" -xzf go.tar.gz
	rm go.tar.gz
fi

# NVM node manager https://github.com/nvm-sh/nvm
if have_not_installed node; then
	PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'
	# shellcheck source=/dev/null
	# Make sure nvm is loaded
	. ~/.profile || true
	nvm install --lts # Install the latest LTS version of node
	nvm use --lts
	nvm alias default "lts/*"
	npm install --global npm@latest
	corepack enable
fi

# Yarn https://yarnpkg.com/getting-started/install
brew_install corepack
corepack enable

# Rust and Cargo https://www.rust-lang.org/tools/install
if have_not_installed rustup; then
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
	# shellcheck source=/dev/null
	source "$HOME/.cargo/env"
fi
rustup update

# Java
# https://formulae.brew.sh/formula/openjdk
brew_install java
if os_is mac && not_ci; then
	sudo ln -sfn "$(brew --prefix)/opt/openjdk/libexec/openjdk.jdk" /Library/Java/JavaVirtualMachines/openjdk.jdk
fi

# NOTE: These take a long time
# Ruby and rbenv
# https://github.com/rbenv/rbenv
default_ruby_version=3.3.4
if have_not_installed rbenv; then
	brew_install rbenv
	brew_install ruby-build
fi
brew upgrade ruby-build
eval "$(rbenv init - bash)"
if os_is ubuntu; then
	brew_install zlib
	# Manually point the ruby install to the homebrew zlib directory
	RUBY_CONFIGURE_OPTS="--with-zlib-dir=$(brew --prefix zlib)" rbenv install --skip-existing $default_ruby_version
	rbenv global $default_ruby_version
fi
if os_is mac; then
	rbenv install --skip-existing $default_ruby_version
	rbenv global $default_ruby_version
fi

# Terminal handy tools
os_install vim
os_install tmux   # https://github.com/tmux/tmux
os_install tig    # https://github.com/jonas/tig
cargo_install eza # https://github.com/eza-community/eza
brew_install bat  # https://github.com/sharkdp/bat
os_install ncdu   # https://dev.yorhel.nl/ncdu
if have_not_installed rg; then
	cargo_install ripgrep # https://github.com/BurntSushi/ripgrep
fi
gem_install tmuxinator # https://github.com/tmuxinator/tmuxinator
brew_install perl      # https://www.perl.org Needed for some vim plugins
if have_not_installed cpanm; then
	brew_install cpanminus # https://formulae.brew.sh/formula/cpanminus
fi
cpanm -n App::cpanminus # Need to do this so neovim's 'checkhealth' doesn't complain
if have_not_installed dua; then
	cargo_install dua-cli # https://github.com/Byron/dua-cli
fi
cargo_install just       # https://github.com/casey/just
cargo_install flamegraph # https://github.com/flamegraph-rs
brew_install jq          # https://jqlang.github.io/jq/
brew_install watchman    # https://facebook.github.io/watchman/ Needed for tools like sorbet
cargo_install lychee     # https://github.com/lycheeverse/lychee

# Neovim https://github.com/neovim/neovim
brew_install neovim
if [ ! -d "$HOME/.virtualenvs/pynvim" ]; then
	rm -rf ~/.virtualenvs/pynvim
	mkdir -p ~/.virtualenvs/pynvim
	python3 -m venv ~/.virtualenvs/pynvim
fi
~/.virtualenvs/pynvim/bin/pip install --upgrade pynvim
npm_global_install neovim
gem_install neovim
cpanm -n Neovim::Ext # https://neovim.io/doc/user/provider.html#provider-perl

# Language servers
brew_install lua-language-server                 # https://github.com/LuaLS/lua-language-server
os_install shellcheck                            # https://github.com/koalaman/shellcheck
npm_global_install bash-language-server          # https://github.com/bash-lsp/bash-language-server
npm_global_install vim-language-server           # https://github.com/iamcco/vim-language-server
npm_global_install typescript-language-server    # https://github.com/typescript-language-server/typescript-language-server
npm_global_install typescript                    # https://github.com/microsoft/TypeScript
npm_global_install vscode-langservers-extracted  # https://github.com/hrsh7th/vscode-langservers-extracted
go_install gopls golang.org/x/tools/gopls@latest # https://github.com/golang/tools/tree/master/gopls
rustup component add rust-analyzer               # https://rust-analyzer.github.io/
npm_global_install svelte-language-server        # https://github.com/sveltejs/language-tools/tree/master/packages/language-server
npm_global_install prettier-plugin-svelte        # https://github.com/sveltejs/prettier-plugin-svelte
gem_install sorbet                               ##
gem_install sorbet-runtime                       ## https://sorbet.org/docs/adopting
gem_install tapioca                              ##
gem_install yard                                 # https://yardoc.org/

# Formatters and linters
os_install shfmt            # https://github.com/mvdan/sh
npm_global_install prettier # https://prettier.io
pipx_install ruff           # https://github.com/astral-sh/ruff
pipx_install isort          # https://pycqa.github.io/isort/
pipx_install pyright        # https://github.com/microsoft/pyright
gem_install rubocop         # https://github.com/rubocop/rubocop
npm_global_install eslint   # https://eslint.org
gem_install erb-formatter   # https://github.com/nebulab/erb-formatter
if have_not_installed sqlformat; then
	pipx_install sqlparse # for `sqlformat` https://github.com/andialbrecht/sqlparse/tree/master/sqlparse
fi
pipx_install djlint         # https://github.com/djlint/djlint
brew_install stylua         # https://github.com/JohnnyMorganz/StyLua
rustup component add clippy # https://github.com/rust-lang/rust-clippy

# Redis
# https://redis.io/docs/getting-started/installation/
if os_is mac; then
	os_install redis
	brew services start redis
fi
if os_is ubuntu; then
	curl -fsSL https://packages.redis.io/gpg | sudo gpg --yes --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg

	echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list

	sudo apt-get update
	sudo apt-get install --yes redis
	sudo systemctl enable redis-server
fi

# AWS
if have_not_installed aws; then
	# https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html
	if os_is mac; then
		curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
		sudo installer -pkg AWSCLIV2.pkg -target /
		rm AWSCLIV2.pkg
	fi
	if os_is ubuntu && chip_is x86; then
		curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
		unzip awscliv2.zip
		sudo ./aws/install
		rm -rf awscliv2.zip aws
	fi
fi
npm_global_install aws-cdk         # https://docs.aws.amazon.com/cdk/v2/guide/home.html
pipx_install git-remote-codecommit # https://github.com/aws/git-remote-codecommit

# Heroku
if os_is mac; then
	brew tap heroku/brew
	brew_install heroku
fi
if os_is ubuntu; then
	curl https://cli-assets.heroku.com/install.sh | sudo sh
fi

# Github CLI (for now just login and install the gh extension manually)
brew_install gh

# Android platform tools
# https://developer.android.com/studio/releases/platform-tools
android_sdk=""
if os_is mac; then
	android_sdk="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip"
fi
if os_is ubuntu; then
	android_sdk="https://dl.google.com/android/repository/platform-tools-latest-linux.zip"
fi
if have_not_installed adb; then
	wget $android_sdk -O android-sdk.zip
	unzip android-sdk.zip -d ~
	rm android-sdk.zip
fi

# Google Cloud SQL proxy
# https://cloud.google.com/sql/docs/mysql/connect-instance-auth-proxy
proxy_file_url=""
if os_is mac && chip_is apple_silicon; then
	proxy_file_url="https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.1/cloud-sql-proxy.darwin.arm64"
fi
if os_is mac && chip_is intel; then
	proxy_file_url="https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.1/cloud-sql-proxy.darwin.amd64"
fi
if os_is ubuntu; then
	proxy_file_url="https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.1/cloud-sql-proxy.linux.amd64"
fi
if have_not_installed cloud_sql_proxy; then
	sudo curl -o /usr/local/bin/cloud_sql_proxy $proxy_file_url
	sudo chmod +x /usr/local/bin/cloud_sql_proxy
fi

# Mysql
if os_is mac; then
	if ci; then
		brew_install mysql
	else
		brew_install mysql@8.4 # Issues with old rails apps and mysql 9
	fi
	if chip_is apple_silicon; then
		brew_install zstd
	fi
fi
if os_is ubuntu; then
	os_install mysql-server
	os_install libmysqld-dev
	os_install libmysqlclient-dev
fi

# Postgres
if os_is mac; then
	brew_cask_install pgadmin4
fi

# Gcloud
gcloud_sdk_url=''
if os_is mac && chip_is apple_silicon; then
	# macOS 64-bit https://cloud.google.com/sdk/docs/install#mac
	gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-455.0.0-darwin-arm.tar.gz"
fi
if os_is mac && chip_is intel; then
	# macOS 64-bit https://cloud.google.com/sdk/docs/install#mac
	gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-455.0.0-darwin-x86_64.tar.gz"
fi
if os_is ubuntu; then
	# Linux 64-bit https://cloud.google.com/sdk/docs/quickstart#linux
	gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-455.0.0-linux-x86_64.tar.gz"
fi
if have_not_installed gcloud; then
	# Download the install tar.gz
	wget $gcloud_sdk_url -O cloud-sdk.tar.gz --quiet
	# Extract it to the home dir
	tar -xf cloud-sdk.tar.gz -C ~
	# Run the install script
	~/google-cloud-sdk/install.sh --usage-reporting=false --command-completion=false --path-update=false --quiet
	# Remove the install tar.gz
	rm cloud-sdk.tar.gz
fi
if not_ci; then
	gcloud auth login
	gcloud components update --quiet
fi

# Global Ruby gems
gem_install rails # https://github.com/rails/rails
yard gems || true # Generate documentation for all installed gems
yard gems         # Need to run it twice because the first one fails (annoyingly)

# Docker
# Don't try to install it on CI builds
if have_not_installed docker && not_ci; then
	if os_is mac; then
		# https://docs.docker.com/desktop/install/mac-install/
		softwareupdate --install-rosetta --agree-to-license
		wget "https://desktop.docker.com/mac/main/arm64/Docker.dmg" -O "Docker.dmg"
		sudo hdiutil attach Docker.dmg
		sudo /Volumes/Docker/Docker.app/Contents/MacOS/install --accept-license
		sudo hdiutil detach /Volumes/Docker
	fi
	if os_is wsl-ubuntu; then
		# https://docs.docker.com/desktop/install/windows-install/
		echo "Need to install Docker Desktop on Windows"
	fi
	if os_is ubuntu; then
		# https://docs.docker.com/desktop/install/ubuntu/
		echo "Need to install Docker Desktop on Ubuntu"
	fi
fi

# Langauge / AI stuff
brew_install sdl2
brew_install ffmpeg

# Data processing stuff
pipx_install parquet-tools

# Tauri development
# https://v2.tauri.app/start/prerequisites
rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
rustup target add aarch64-apple-ios x86_64-apple-ios aarch64-apple-ios-sim
if os_is mac; then
	brew_install cocoapods
fi

# Final cleanup steps
brew cleanup
brew autoremove
if os_is ubuntu; then
	sudo apt autoremove -y
fi

set +x

echo "------------------------------"
echo "Final steps:"
if os_is ubuntu; then
	echo "- Install Docker Desktop"
fi
if os_is wsl-ubuntu; then
	echo "- Install Docker Desktop on Windows"
fi
if os_is mac; then
	echo "- Open Docker Desktop and complete the installation of the CLI tools etc."
	echo "- Install the Postgres.app from https://postgresapp.com/"
	echo "--- Then do a 'gem install pg'"
fi
echo "- Run 'gh auth login' to authenticate with GitHub"
echo "- Run 'gh extension install github/gh-copilot'"
echo "- Check that the terminal is using the correct font"
echo "- Run ':checkhealth' in neovim and make sure everything is green"
