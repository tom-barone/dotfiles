#!/usr/bin/env bash

set -e # Fail the script if any installs fail
source helpers.sh

brew_prefix=$(brew --prefix)

# Essentials
os_install wget
if os_is ubuntu; then
	os_install build-essential # make and more
	os_install snapd
	os_install unzip
	os_install software-properties-common
fi
if os_is mac; then
	xcode-select --install || true
	os_install make
	os_install mono
fi

# Get the latest zsh and bash from homebrew (don't want to check for existing)
brew install zsh
brew install bash
# Add to the allowed shells so we can use them in chsh
grep -qxF '# Next lines generated by dotfiles/post_install.sh' /etc/shells || cat <<EOT | sudo tee -a /etc/shells
# Next lines generated by dotfiles/post_install.sh
$brew_prefix/bin/zsh
$brew_prefix/bin/bash
EOT

# .NET SDK and runtime
# Ignore for now, there were some issues running it
# on the github action ubuntu:22.04 runner image
#if os_is mac; then
## Pre-requisite
## https://learn.microsoft.com/en-us/dotnet/core/install/macos#libgdiplus
#os_install mono-libgdiplus
#fi
## https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script
#if have_not_installed dotnet; then
#wget https://dot.net/v1/dotnet-install.sh
#chmod +x dotnet-install.sh
#./dotnet-install.sh --channel 7.0
#rm dotnet-install.sh
#fi

# Git credential manager
# https://github.com/git-ecosystem/git-credential-manager/blob/release/docs/install.md
if have_not_installed git-credential-manager; then
	if os_is mac; then
		brew install --cask git-credential-manager
	fi
	if os_is ubuntu; then
		wget "https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.3.2/gcm-linux_amd64.2.3.2.deb"
		sudo dpkg -i gcm-linux_amd64.2.3.2.deb
		rm gcm-linux_amd64.2.3.2.deb
	fi
fi

# zsh-abbr
# https://zsh-abbr.olets.dev/installation.html
rm -rf "$HOME/opt/zsh-abbr"
git clone https://github.com/olets/zsh-abbr --single-branch --branch main --depth 1 "$HOME/opt/zsh-abbr"

# Powerlevel10k
# https://github.com/romkatv/powerlevel10k#installation
rm -rf "$HOME/opt/powerlevel10k"
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$HOME/opt/powerlevel10k"

# Fzf
# https://github.com/junegunn/fzf/
rm -rf "$HOME/opt/fzf"
git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/opt/fzf"
"$HOME/opt/fzf/install" --bin --no-update-rc

# ZSH extra completions
# https://github.com/zsh-users/zsh-completions
rm -rf "$HOME/opt/zsh-completions"
git clone --depth 1 https://github.com/zsh-users/zsh-completions.git "$HOME/opt/zsh-completions"

# GNU versions of important programs
if os_is mac; then
	# Don't want to check if they're already installed
	brew install gnu-sed
	brew install make
fi

os_install cmake
os_install vim
os_install tmux
os_install shellcheck
os_install shfmt
os_install tig

# Node
# https://nodejs.org/en/download/package-manager
brew_install node

# Global npm packages
npm install --global npm@latest
npm_global_install bash-language-server # https://github.com/bash-lsp/bash-language-server
npm_global_install vim-language-server # https://github.com/iamcco/vim-language-server

# Rust and Cargo
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path

# Rust crates
cargo_install ripgrep

# Terminal handy tools
os_install exa
brew_install bat

# Neovim setup
os_install neovim
pip3 install virtualenvwrapper # Setup pynvim access (see :help provider-python)
source virtualenvwrapper.sh
mkvirtualenv nvim
pip3 install pynvim
deactivate
npm_global_install neovim

#pip_install yapf
#pip_install prospector
#pip_install poetry

## Gcloud
#gcloud_sdk_url=''
#if os_is mac; then
## macOS 64-bit https://cloud.google.com/sdk/docs/install#mac
#gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-319.0.0-linux-x86_64.tar.gz"
#fi
#if os_is ubuntu; then
## Linux 64-bit https://cloud.google.com/sdk/docs/quickstart#linux
#gcloud_sdk_url="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-319.0.0-darwin-x86_64.tar.gz"
#fi
#if have_not_installed gcloud; then
## Download the install tar.gz
#wget $gcloud_sdk_url -O cloud-sdk.tar.gz
## Extract it to the home dir
#tar -xvf cloud-sdk.tar.gz -C ~
## Run the install script
#~/google-cloud-sdk/install.sh --usage-reporting=false --command-completion=false --path-update=false
## Remove the install tar.gz
#rm cloud-sdk.tar.gz
#fi

## Android platform tools
## https://developer.android.com/studio/releases/platform-tools
#android_sdk=""
#if os_is mac; then
#android_sdk="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip"
#fi
#if os_is ubuntu; then
#android_sdk="https://dl.google.com/android/repository/platform-tools-latest-linux.zip"
#fi
#if have_not_installed adb; then
#wget $android_sdk -O android-sdk.zip
#unzip android-sdk.zip -d ~
#rm android-sdk.zip
#fi

## Java
#if os_is ubuntu; then
#if have_not_installed java; then
#os_install default-jre
#fi
#fi

## Google Cloud SQL proxy
#proxy_file_url=""
#if os_is mac; then
#proxy_file_url="https://dl.google.com/cloudsql/cloud_sql_proxy.darwin.amd64"
#fi
#if os_is ubuntu; then
#proxy_file_url="https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64"
#fi
#if have_not_installed cloud_sql_proxy; then
#curl -o /usr/local/bin/cloud_sql_proxy $proxy_file_url
#chmod +x /usr/local/bin/cloud_sql_proxy
#fi

## TODO see if we can remove duplicated code between here and bashrc
#export WORKON_HOME=~/.virtualenvs
#if os_is mac; then
#export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3.9
#source /usr/local/bin/virtualenvwrapper.sh
#fi
#if os_is ubuntu; then
#export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.9
#source ~/.local/bin/virtualenvwrapper.sh
#fi


#os_install neofetch
#
#

## NOTE: These take a long time
## Ruby and rbenv
## https://github.com/rbenv/rbenv
#default_ruby_version=3.1.2
#brew_install rbenv
#brew_install ruby-build
#rbenv install --skip-existing $default_ruby_version
#rbenv global $default_ruby_version
#eval "$(rbenv init - bash)"

## Gems
#gem_install tmuxinator # https://github.com/tmuxinator/tmuxinator
#gem_install neovim
## TODO: Add back in and tests
##gem_install rubocop
##gem_install neovim
##gem_install htmlbeautifier
